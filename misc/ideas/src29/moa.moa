class token:
  code   str
  offset int
  lineno int
  indent int
  id     bool
  op1    bool
  op2    bool

enum ast:
  leaf token
  node vec[ast]

dec compile: str str
def compile moa:
  let nodes = parse(moa)
  infer nodes
  return nodes.map(gen).join("\n")

dec tokenize: str vec[token]
def tokenize moa:
  var pos = 0
  var lineno = 1
  var indent = 0
  var tokens = []
  def isop c   : return "+-*/%|&^<>!=~".has(c)
  def isspace c: return c == " " || c == "\n"
  def isnum c  : return "0" <= c && c <= "9"
  def isfloat c: return isnum(c) || c == "."
  def isid c   : return (("A" <= c) && (c <= "Z")) || (("a" <= c) && (c <= "z")) || c == "_"
  def isidnum c: return isid(c) || isnum(c)
  def skip f   : while pos < moa.size && f(moa[pos]): pos += 1
  def skip1 f  : skip f; pos += 1
  while pos < moa.size:
    let offset = pos
    let c = moa[pos]
    pos += 1
    if:
      isspace(c): skip isspace
      isnum(c)  : skip isfloat
      isid(c)   : skip isidnum
      isop(c)   : skip isop
      c == "."  : skip isidnum
      c == `"`  : skip1 (c => c != `"`])
      c == "`"  : skip1 (c => c != "`"])
      c == "#"  : skip1 (c => c != "\n")
      throw "Unknown character " + c
    if c == "#":
      continue
    let s = moa.slice(offset pos)
    if isspace(c):
      lineno += s.split("\n").size - 1
      if s.has("\n"):
        indent = s.split("\n").at(-1).size
      continue
    let op1 = isop(c) && pos < moa.size && moa[pos] != " "
    let op2 = isop(c) && !op1
    let prefix = iif((offset === 0 || moa[offset - 1] == " ") && "([{".has(c) " " "")
    tokens.push token(prefix + s offset lineno indent isid(c) op1 op2)
  return tokens

dec parse: vec[token] ast
def parse moa:
  let tokens = tokenize(moa)
  var pos = 0
  def until f:
    var a = []
    while pos < tokens.size && f(tokens[pos]):
      a.push consume()
    return a
  def untilBy code:
    var a = []
    while pos < tokens.size && tokens[pos].code != code:
      a.push consume()
    pos += 1
    return a
  def link a:
    if pos >= tokens.size:
      return a
    let t = tokens[pos]
    return iif:
      t.code[0] == ".": pos += 1; link(node([leaf(t) a]))
      t.code == "("   : pos += 1; link(node([a].concat(untilBy(")"))))
      t.code == "["   : pos += 1; link(node([leaf(t) a].concat(untilBy("]"))))
      t.op2           : pos += 1; link(node([leaf(t) a consume()]))
      a
  def consume:
    let t = tokens[pos]
    pos += 1
    return iif:
      t.op1: link node([leaf(t) consume()])
      t.code == " [": link node([leaf(t)].concat(untilBy("]")))
      t.code == " (": link node([leaf(t)].concat(untilBy(")")))
      true: link leaf(t)
  def line:
    let lineno = tokens[pos].lineno
    let a = until(t => t.lineno == lineno)
    return iif a.size == 1:
      a[0]
      node a
  return [line()]

dec infer: ast void
def infer nodes:
  return

dec show: ast str
def show root:
  def showleaf t tail:
    return iif:
      t.op1: t.code + show(tail[0])
      t.op2: show(tail[0]) + " " + t.code + " " + show(tail[1])
      t.code[0] == ".": show(tail[0]) + t.code
      t.code == " [": "[" + tail.map(show).join(", ") + "]"
      t.code == " (": "(" + show(tail[0]) + ")"
      true: show(leaf(t)) + "(" + tail.map(show).join(", ") + ")"
  return match root:
    leaf t: t.code
    node n:
      let head = n[0]
      let tail = n.slice(1)
      match head:
        node n: show(n) + "(" + tail.map(show).join(", ") + ")"
        leaf t: showleaf t tail

dec gen: ast str
def gen root:
  def genleaf t tail:
    return iif:
      t.op1: t.code + "(" + (gen(tail[0])) + ")"
      t.op2: gen(tail[0]) + " " + t.code + " " + gen(tail[1])
      t.code[0] == ".": gen(tail[0]) + t.code
      t.code == "assert": gen(leaf(t)) + "(" + show(tail[0]).quote + ", " + tail.map(gen).join(", ") + ")"
      t.code == "tuple": gen(leaf(t)) + tail.size + "(" + tail.map(gen).join(", ") + ")"
      t.code == "map": gen(leaf(t)) + tail.size + "(" + tail.map(gen).join(", ") + ")"
      t.code == " [": "moa_vec(" + tail.map(gen).join(", ") + ")"
      t.code == " (": "(" + gen(tail[0]) + ")"
      true: gen(leaf(t)) + "(" + tail.map(gen).join(", ") + ")"
  def gennode head tail:
    return match head:
      node n: gen(n) + "(" + tail.map(gen).join(", ") + ")"
      leaf t: genleaf t tail
  return match root:
    leaf t: iif t.id:
      "moa_" + t.code
      t.code
    node n: gennode n[0] n.slice(1)
