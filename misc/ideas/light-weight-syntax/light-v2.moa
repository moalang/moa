compile moa =
  nodes = parse moa
  infer nodes
  nodes.map(gen).join("\n")

-- private

class token:
  code   str
  offset int
  lineno int
  indent int
  op1    bool
  op2    bool

enum ast:
  leaf token
  node vec[ast]

tokenize moa = var tokens = []:
  var pos = 0
  var lineno = 1
  var indent = 0
  isop c    = "+-*/%|&^<>!=~".has c
  isspace c = c == " " || c == "\n"
  isnum c   = "0" <= c <= "9"
  isid c    = "A" <= c <= "Z" || "a" <= c <= "z" || c == "_"
  isidnum c = isid(c) || isnum(c)
  skip f    = while pos < moa.size && f(moa[pos]): pos+=1
  skip1 f   = skip f; pos+=1
  while pos < moa.size:
    c = moa[pos]
    offset = pos
    pos += 1
    if isspace(c): skip isspace
       isnum(c)  : skip isnum
       isid(c)   : skip isidnum
       isop(c)   : skip isop
       c == '"'  : skip1 (== '"')
    s = moa.slice offset pos
    if isspace c:
      lineno += s.split("\n").size - 1
      if s.has("\n"):
        indent := s.split("\n").at(-1).size
    else:
      lspace = offset === 0 || moa[offset - 1] == " "
      op1 = isop(c) && lspace
      op2 = isop(c) && !op1
      code = iif lspace && "([{".has(c):
        " " ++ s
        s
      tokens.push token(code offset lineno indent op1 op2))

parse moa = return [consume()]:
  var pos = 0
  tokens = tokenize(moa)
  untilBy code = var a = []:
    while pos < tokens.size && tokens[pos].code != code:
      a.push consume()
    pos += 1
  link a = iif:
    pos < tokens.size && tokens[pos].code == "(": pos += 1; link node([a].concat(untilBy(")")))
    pos < tokens.size && tokens[pos].op2        :           link node([leaf(tokens[pos+=1]) a consume()])
    a
  consume = fn:
    t = tokens[pos]
    pos += 1
    iif t.op1:
      link node([leaf(t) consume()])
      link leaf(t)

infer nodes = return

gen root = match root:
  leaf t: t.code
  node [(leaf t) ...r]: iif:
    t.op1: ++ "(" t.code gen(r[0]) ")"
    t.op2: ++ gen(tail[0]) " " t.code " " gen(tail[1])
  node [a ...r]: ++ gen(a) "(" r.map(gen).join(", ") ")"
