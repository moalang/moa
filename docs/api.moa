enum void: void

enum bool:
  true
  false
  !     : bool
  ||    : bool bool
  &&    : bool bool

interface _num a:
  +        : a a
  -        : a a
  *        : a a
  /        : a a
  %        : a a
  **       : a a
  abs      : a
  neg      : a

interface _int a:
  _num
  ~        : a
  &        : a a
  |        : a a
  ^        : a a
  <<       : a a
  >>       : a a
  int      : int
  float    : float
  char     : str
class i8 : _int
class i16: _int
class i32: _int
class i64: _int
class u8 : _int
class u16: _int
class u32: _int
class u64: _int
class int: _int
class byte = u8
class bytes = vec[u8]

interface _float a:
  _num
  floor : int
  ceil  : int
  round : int
  isinf : bool
  isnan : bool
class f32: _float
class f64: _float
class float: _float

class str:
  __new   : ...
  __get   : int a @error
  size    : int
  concat  : str str
  slice   : int int? str
  split   : str int? vec[str]
  index   : str opt[int]
  rindex  : str opt[int]
  replace : str str str
  starts  : str bool
  ends    : str bool
  has     : str bool
  trim    : str
  reverse : str
  repeat  : int str
  format  : ...any str
  int     : opt[int]
  float   : opt[float]

class fn ...a b
  __call  : ...a b

class tuple ...a:
  __new   : ...a
  : a.map value,i => tuple(i value)

class any:
  as t   : t opt[t]
  is t   : t bool
  string : str

enum opt a:
  some a
  none
  |||    : opt[a] opt[a]
  then b : fn[a b] opt[b]
  or     : fn[a] a

class vec a:
  __new    : ...[a]
  __get    : int a @error
  size     : int
  slice    : int int vec[a]
  repeat   : int vec[a]
  concat   : vec[a] vec[a]
  map b    : fn[a int? b] vec[b]
  fmap b   : fn[a int? vec[b]] vec[b]
  keep     : fn[a int? bool] vec[a]
  all      : fn[a int? bool] bool
  any      : fn[a int? bool] bool
  fold b   : fn[b a b] b b
  find     : fn[a bool] opt[a]
  index    : fn[a bool] opt[int]
  rindex   : fn[a bool] opt[int]
  zip b    : vec[b] vec[tuple[a b]]
  sort     : fn[a a bool]? vec[a]
  reverse  : vec[a]
  join     : str str
  has      : a bool
  min      : a
  max      : a
  minmax   : tuple[a a]
  unique   : set[a]
  string   : str? str
  __set    : int a a @error  # modify in-place
  push     : a a             # modify and expand
  pop      : a @error        # modify and shurink

class set a:
  __new : ...[a] set[a]
  -     : set[a] set[a]
  |     : set[a] set[a]
  &     : set[a] set[a]
  ^     : set[a] set[a]
  size  : int
  has   : a bool
  items : vec[a]
  add   : a bool  # modify in-place
  rid   : a bool  # modify in-place

class map k v:
  __new  : ...[k v] map[k v]
  __get  : k opt[v]
  size   : int
  has    : k bool
  keys   : vec[k]
  values : vec[v]
  items  : vec[tuple[k v]]
  concat : map[k v] map[k v]
  __set  : k v v       # modify and expand
  rid    : k opt[v]    # modify and shrink

dec == a      : a a bool
dec != a      : a a bool
dec <  a      : a a bool
dec <= a      : a a bool
dec >  a      : a a bool
dec >= a      : a a bool
dec log t     : t ...any t
dec assert a  : a a void
dec iif a     : ...[bool a] a
dec if a      : bool a void
dec else a    : a void
dec match a b : a ...[a b] b
dec for       : void
dec while     : bool void
dec continue  : void
dec break     : void
dec return a  : a a
dec throw a b : a b
dec catch a b : a fn[b a] a # b is union type of thrown types

# standard modules

class time:
  year   : int
  month  : int
  day    : int
  hour   : int
  min    : int
  sec    : int
  wday   : int
  yday   : int
  offset : int
  string : str? str
  zone   : str
  offset : int
  lcoal  : str time

class regexp:
  __new   : str
  match   : str bool
  capture : str vec[str]
  split   : str vec[str]
  replace : str fn[vec[str] str] str

module io:
  args     : vec[str]
  env      : map[str str]
  now      : time
  db[t u]  : fn[t u] u
  rand     : int int
  fetch    : str req res @error {
    req:
      method  str
      headers vec[tuple[str str]]
      body    reader
    res:
      status  int
      headers vec[tuple[str str]]
      body    reader
  }
  serve    : str fn[req res] void @error {
    req:
      host     str
      version  str
      method   str
      path     str
      headers  vec[tuple[str str]]
      body     reader
    res:
      status  int
      map     vec[tuple[str str]]
      body    reader
  }
  interface reader a:
    peek    : bytes
    read    : int? bytes @error
    reads b : b   @error
    i8      : i8  @error
    i16     : i16 @error
    i32     : i32 @error
    i64     : i64 @error
    u8      : u8  @error
    u16     : u16 @error
    u32     : u32 @error
    u64     : u64 @error
    f32     : f32 @error
    f64     : f64 @error
  interface writer a:
    write   : ...any int @error
  interface stream a:
    reader
    writer
    endian  : str # LE or BE
    le      : a
    be      : a
    close   : bool @error
    closed  : bool
  class file:
    .stream
    fsync  : int @error
    offset : int
    seek   : int @error
  class socket:
    .stream
    shutdown : bool bool void @error

module std:
  class bcrypt:
    __new   : str
    compare : str bool
  math:
    acos    : float float
    acosh   : float float
    asin    : float float
    asinh   : float float
    atan    : float float
    atan2   : float float
    atanh   : float float
    cbrt    : float float
    cos     : float float
    cosh    : float float
    erf     : float float
    erfc    : float float
    exp     : float float
    gamma   : float float
    log     : float float
    log10   : float float
    log2    : float float
    sin     : float float
    sinh    : float float
    sqrt    : float float
    tan     : float float
    tanh    : float float
    e       : float
    pi      : float
    inf     : float
    nan     : float
    hypot   : float float float
    logn    : float float float
    lgamma  : float tuple[float int]
    frexp   : float tuple[float int]
    ldexp   : float int float
