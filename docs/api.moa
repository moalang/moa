enum void: void

enum bool:
  true
  false
  !     : bool
  ||    : bool bool
  &&    : bool bool
  &&& a : option[a] option[a]
  ||| a : option[a] option[a]

interface _num a:
  +        : a a
  -        : a a
  *        : a a
  /        : a a
  %        : a a
  **       : a a
  abs      : a
  neg      : a

interface _int a:
  _num
  ~        : a
  &        : a a
  |        : a a
  ^        : a a
  <<       : a a
  >>       : a a
  int      : int
  float    : float
  char     : string
class i8 : _int
class i16: _int
class i32: _int
class i64: _int
class u8 : _int
class u16: _int
class u32: _int
class u64: _int
class int: _int

interface _float a:
  _num
  floor : int
  ceil  : int
  round : int
  isinf : bool
  isnan : bool
class f32: _float
class f64: _float
class float: _float

class string:
  __new   : ...a[any]
  __at    : int a @error
  size    : int
  concat  : string string
  slice   : int int string
  split   : string vec[string]
  splitn  : string int array[string]
  index   : string option[int]
  rindex  : string option[int]
  replace : string string string
  starts  : string bool
  ends    : string bool
  has     : string bool
  trim    : string
  reverse : string
  repeat  : int string
  format  : ... string
  int     : option[int]
  float   : option[float]

class fn ...a[any] b
  __call  : ...a b

class tuple ...a[any]:
  __new   : ...a
  : a.map(x,i => tuple(i h))

class struct ...a[id type]:
  __new   : ...a.map(id,type => type)
  : a.map(id,type => tuple(id type))

class any:
  as t   : option[t]
  string : string

enum option a:
  some a
  none
  &&&    : option[a] option[a]
  |||    : option[a] option[a]
  bool   : bool
  then b : (a b) option[b]
  or     : a a
  alt    : a

class array a:
  __new    : ...[a] array[a]
  __at     : int a @error
  size     : int
  slice    : int int array[a]
  repeat   : int array[a]
  concat   : array[a] array[a]
  map b    : (a b) array[b]
  fmap b   : (a array[b]) array[b]
  keep     : (a bool) array[a]
  all      : (a bool) bool
  any      : (a bool) bool
  fold b   : (b a b) b b
  scan b   : (b a b) b array[b]
  find     : (a bool) option[a]
  index    : (a bool) option[int]
  rindex   : (a bool) option[int]
  zip b    : array[b] array[tuple[a b]]
  sort     : (a a bool) array[a]
  reverse  : array[a]
  join     : string string
  has      : a bool
  min      : a
  max      : a
  minmax   : tuple[a a]
  unique   : set[a]
  __set    : int a a @error  # modify in-place
  push     : a a             # modify and expand
  pop      : a @error        # modify and shurink

class set a:
  __new : ...[a] set[a]
  -     : set[a] set[a]
  |     : set[a] set[a]
  &     : set[a] set[a]
  ^     : set[a] set[a]
  size  : int
  has   : a bool
  array : array[a]
  add   : a bool  # modify in-place
  rid   : a bool  # modify in-place

class map k v:
  __new  : ...[k v] map[k v]
  __at   : k option[v]
  size   : int
  has    : k bool
  keys   : array[k]
  values : array[v]
  items  : array[tuple[k v]]
  concat : map[k v] map[k v]
  __set  : k v v       # modify and expand
  gset   : k v v       # modify and expand
  rid    : k option[v] # modify and shrink

class time:
  year   : int
  month  : int
  day    : int
  hour   : int
  min    : int
  sec    : int
  wday   : int
  yday   : int
  offset : int
  string : string? string
  zone   : string
  offset : int
  lcoal  : string time

class bytes:
  __new   : int? int?
  at      : int u8 @error
  append  : ...any bytes
  size    : int
  slice   : int int? bytes
  tr      : str str
  stream  : stream

interface stream a:
  read     : int? int? bytes @error
  reads[t] : t @error
  peek     : bytes
  write    : ...any int @error
  flush    : int @error
  offset   : int
  seek     : int @error
  close    : bool @error
  closed   : bool
  endian   : str # LE or BE
  le       : a
  be       : a

extern std:
  env      : map[str str]
  now      : time
  log[t]   : t ... t
  db[t u]  : (t u) u
  rand     : int int? int
  fetch    : string req res {
    req:
      method  string
      headers vec[tuple[string string]]
      body    stream
    res:
      status  int
      headers vec[tuple[string string]]
      body    stream
  }
  serve    : string req res {
    req:
      host     string
      version  string
      method   string
      path     string
      headers  vec[tuple[string string]]
      body     stream
    res:
      status  int
      map     vec[tuple[string string]]
      body    stream
  }
  regexp:
    __new   : string
    match   : string bool
    capture : string vec[string]
    split   : string vec[string]
    replace : string (vec[string] string) string
  math:
    acos    : float float
    acosh   : float float
    asin    : float float
    asinh   : float float
    atan    : float float
    atan2   : float float
    atanh   : float float
    cbrt    : float float
    cos     : float float
    cosh    : float float
    erf     : float float
    erfc    : float float
    exp     : float float
    gamma   : float float
    log     : float float
    log10   : float float
    log2    : float float
    sin     : float float
    sinh    : float float
    sqrt    : float float
    tan     : float float
    tanh    : float float
    e       : float
    pi      : float
    inf     : float
    nan     : float
    hypot   : float float float
    logn    : float float float
    lgamma  : float tuple[float int]
    frexp   : float tuple[float int]
    ldexp   : float int float
  bcrypt:
    __new   : string
    compare : string bool

dec == a      : a a bool
dec != a      : a a bool
dec <  a      : a a bool
dec <= a      : a a bool
dec >  a      : a a bool
dec >= a      : a a bool
dec assert a  : a a void
dec iif a     : ...[bool a] a
dec guard     : bool void
dec if a      : bool a void
dec else a    : a void
dec throw a b : a b
dec catch a b : a (b a) a # b is union type of thrown types
dec return a  : a a
dec match a b : a ...(a b) b
dec for       : void
dec while     : bool void
dec continue  : void
dec break     : void
