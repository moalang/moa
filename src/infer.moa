struct TypeError {
  t Type
  u Type
}

def infer root {
  var tvindex 0
  def newtv {
    tvindex += 1
    return Type(tvindex.str [])
  }
  def newfn args {
    return Type("fn" args)
  }
  let tv1     newtv()
  let tv2     newtv()
  let tvoid   Type("void" [])
  let tbool   Type("bool" [])
  let tint    Type("int" [])
  let tfloat  Type("float" [])
  let tstring Type("string" [])
  let tbytes  Type("bytes" [])
  let tregexp Type("regexp" [])
  let tvec    Type("vec" [tv1])
  let tdict   Type("dict" [tv1 tv2])
  let rootenv    dict(
    "bytes"  tbytes
    "regexp" tregexp
    "vec"    tvec
    "dict"   tdict
    "!"      newfn([tbool tbool])
    "+"      newfn([tint tint tint])
    "-"      newfn([tint tint]) # TODO
    "<"      newfn([tv1 tv1 tbool])
    "fail"   newfn([tv1 tv2])
    "iif"    newfn([tbool tv1 tv1 tv1])
    "if"     newfn([tbool tv1 tvoid])
    "return" newfn([tv1 tv1])
  )
  def infwith node env ng {
    def inf node {
      node.type = iif(
        node.argv.size == 0
          infcode(node.token.code)
        node.token.code == ""
          infcall(inf(node.argv[0]) node.argv.slice(1).map(inf))
        node.token.code == "let"
          inflet(node.argv[0].token.code node.argv[1])
        node.token.code == "fn"
          inffn(node.argv.slice(0 -1) node.argv.at(-1))
        node.token.code == "do"
          node.argv.map(inf).at(-1)
        infcall(infcode(node.token.code) node.argv.map(inf)))
      return node.type
    }
    def inflet id node {
      let tv = newtv()
      env.set id tv
      unify tv inf(node)
      return tv
    }
    def inffn args body {
      each _ arg args {
        arg.type = newtv()
      }
      let newenv env.merge(args.dict(fn(arg tuple(arg.token.code arg.type))))
      let newng ng.intersection(set(args.map(fn(arg arg.token.code))))
      let ret infwith(body newenv newng)
      return newfn(args.map(fn(arg arg.type)).concat([ret]))
    }
    def infcode s {
      return iif(
        ((s == "true") || (s == "false"))
          tbool
        r/^[0-9]\./.test(s)
          tfloat
        r/^[0-9]/.test(s)
          tint
        s.starts("`") || s.starts(`"`)
          tstring
        s.starts("r/")
          tregexp
        s == "["
          tvec
        env.has(s)
          iif(ng.has(s) env.get(s) fresh(env.get(s) ng))
        fail(`Can not infer type of '${s}'`))
    }
    return inf(node)
  }
  def infcall f xs {
    f = prune(f)
    if isvar(f) {
      let g newfn(xs.concat(newtv()))
      f.vars[0] = g
      return g
    } else if f.name == "bytes" {
      each i x xs {
        unify tint x
      }
      return f
    } else if f.name == "vec" {
      each i x xs {
        unify f.vars[0] x
      }
      return f
    } else if f.name == "dict" {
      assert (f.vars.size % 2) == 0
      each i x xs {
        unify f.vars[i % 2] x
      }
      return f
    } else if f.name == "fn" {
      assert (f.vars.size - 1) == xs.size
      each i x xs {
        unify f.vars[i] x
      }
      return f.vars[f.vars.size - 1]
    } else {
      assert false
    }
  }
  def unify t u {
    t = prune(t)
    u = prune(u)
    if isvar(t) {
      t.vars[0] = u
    } else if isvar(u) {
      unify u t
    } else {
      if t.name != u.name {
        throw TypeError(t u)
      }
      if t.vars.size != u.vars.size {
        throw TypeError(t u)
      }
      each i tt t.vars {
        unify tt u.vars[i]
      }
    }
  }
  def isvar t {
    return r/^[0-9]/.test(t.name)
  }
  def prune t {
    if isvar(t) && t.vars.size == 1 {
      return t.vars[0] = prune(t.vars[0])
    } else {
      return t
    }
  }
  def fresh t ng {
    var dup dict()
    def rec t {
      t = prune(t)
      if ng.has(t) {
        return t
      } else if isvar(t) {
        return iif(dup.has(t.name) dup.get(t.name) dup.set(t.name newtv()))
      } else {
        return Type(t.name t.vars.map(rec))
      }
    }
    return t
  }
  def recprune node {
    node.type = prune(node.type)
    node.type.vars = node.type.vars.map(prune)
    node.argv.map recprune
  }
  root.map fn(node infwith(node rootenv set([])))
  root.map recprune
  return root
}

test {
  def show t {
    return iif(t.vars.size == 0
      t.name
      t.name + "[" + t.vars.map(show).join(" ") + "]")
  }
  def simplify s {
    var d dict(0 0)
    return r/[0-9]+/.repf(s fn(a d.getset(a[0] d.size)))
  }
  def inf s {
    return simplify(show(infer(parse(tokenize(s "")))[0].type))
  }

  # primitives
  assert inf("true") == "bool"
  assert inf("false") == "bool"
  assert inf("0") == "int"
  assert inf("1.0") == "float"
  assert inf("``") == "string"
  assert inf(`""`) == "string"
  assert inf("bytes()") == "bytes"
  assert inf("bytes(1 2)") == "bytes"
  assert inf("r/a/") == "regexp"
  assert inf("[]") == "vec[1]"
  assert inf("[1]") == "vec[int]"
  assert inf("[1 2]") == "vec[int]"
  assert inf("dict(1 true)") == "dict[int bool]"
  assert inf("dict(1 true 2 false)") == "dict[int bool]"

  # unary operator
  assert inf("!true") == "bool"
  assert inf("-1") == "int"

  # binary operator
  assert inf("(+ 1 1)") == "int"
  assert inf("(< 1 1)") == "bool"

  # branch
  assert inf("(iif true 1 2)") == "int"
  assert inf("(iif true true true)") == "bool"

  # fn
  assert inf("(fn a (+ a 1))") == "fn[int int]"
  assert inf("(fn a b (+ a (+ b 0)))") == "fn[int int int]"
  assert inf("(fn 1)()") == "int"
  assert inf("(fn a a)") == "fn[1 1]"
  assert inf("(fn a b a)") == "fn[1 2 1]"
  assert inf("(fn a b b)") == "fn[1 2 2]"
  assert inf("((fn a a) 1)") == "int"

  # let
  assert inf("(let a 1)\na") == "int"
  assert inf("(let f (fn a a))\n(f 1)") == "fn[int int]"
  ## TODO: after default generics syntax defined
  #assert inf("(let f (fn a a))\n(f 1)\nf") == "fn[1 1]"
  #assert inf("(let f (fn a a))\n(f 1)\n(f true)") == "bool"

  # dec
  io.log "skip infer tests"
  return
  assert inf("(dec f int int)\nf") == "fn[int int]"

  # do
  assert inf("(do 1)") == "int"
  assert inf("(do 1 true)") == "bool"
  assert inf("(do (if false (return 1)) 1)") == "int"

  # property
  io.log "skip infer tests for property"
  return
  assert inf("(let a (fn b (. b text)))") == "(1.text(2) 2)"
  assert inf(`(catch (throw "a") (fn e (. e message)))`) == "string"
  assert inf("(vec (new a 2))") == "vec[new__a[int]]"
  assert inf("(struct a () b int) (vec (a 1))") == "vec[a]"
  assert inf("(struct a () b int) (vec (a 1) (new b 2))") == "vec[a]"
  assert inf("(vec (new a 2))") == "vec[new__a[int]]"
  assert inf("(struct a () b int) (vec (a 1))") == "vec[a]"
  assert inf("(struct a () b int) (vec (a 1) (new b 2))") == "vec[a]"
  assert inf("(struct a () b int) (vec (new b 1) (a 2))") == "vec[a]"
  assert inf("(struct a () b int c int) (vec (new b 1) (a 2 3))") == "vec[a]"

  # container
  assert inf("(vec)") == "vec[1]"
  assert inf("(vec 1)") == "vec[int]"
  assert inf("(vec (tuple 1 true))") == "vec[tuple[int bool]]"
  assert inf("(set [])") == "vec[1]"
  assert inf("(set [1])") == "vec[int]"
  assert inf("(dict 1 true)") == "dict[int bool]"

  # combinations
  assert inf("(let f (fn x (+ x 1))) (let g (fn x (+ x 2))) (+ (f 1) (g 1))") == "int"
  assert inf("(fn f g x (g (f x)))") == "((1 2) (2 3) 1 3)"
  assert inf("(fn x y z (x z (y z)))") == "((1 2 3) (1 2) 1 3)"
  assert inf("(fn b x (iif (x b) x (fn x b)))") == "(1 (1 bool) (1 1))"
  assert inf("(fn x (iif true x (iif x true false)))") == "(bool bool)"
  assert inf("(fn x y (iif x x y))") == "(bool bool bool)"
  assert inf("(fn n ((fn x (x (fn y y))) (fn f (f n))))") == "(1 1)"
  assert inf("(fn x y (x y))") == "((1 2) 1 2)"
  assert inf("(fn x y (x (y x)))") == "((1 2) ((1 2) 1) 2)"
  assert inf("(fn h t f x (f h (t f x)))") == "(1 ((1 2 3) 4 2) (1 2 3) 4 3)"
  assert inf("(fn x y (x (y x) (y x)))") == "((1 1 2) ((1 1 2) 1) 2)"
  assert inf("(let id (fn x x)) (let f (fn y (id (y id))))") == "(((1 1) 2) 2)"
  assert inf("(let id (fn x x)) (let f (fn (iif (id true) (id 1) (id 2))))") == "(int)"
  assert inf("(let f (fn x 1)) (let g (fn (+ (f true) (f 4))))") == "(int)"
  assert inf("(let f (fn x x)) (let g (fn y y)) (let h (fn b (iif b (f g) (g f))))") == "(bool (1 1))"

  # variadic arguments
  assert inf("(fn a? (+ a 0))") == "(int? int)"
  assert inf("((fn a? (+ a 0)) 1)") == "int"
  assert inf("(fn a b? (+ a b 0))") == "(int int? int)"
  assert inf("((fn a b? (+ a b 0)) 1)") == "int"
  assert inf("((fn a b? (+ a b 0)) 1 2)") == "int"
  assert inf("(fn a* a)") == "(1* vec[1])"
  assert inf("((fn a* a) 1)") == "vec[int]"
  assert inf("((fn a b* a) 1 2)") == "int"
  assert inf("((fn a b* b) 1 2)") == "vec[int]"

  # io
  assert inf(`((. ((. io fetch) "") text))`) == "string"
  assert inf(`((. ((. io fetch) "") header) "")`) == "string"
  assert inf(`((. ((. io fetch) "") cookie) "")`) == "string"

  # reject invalid types
  assert inf("(+ 1 true)") == "Type error"
  assert inf("(iif 1 2 3)") == "Type error"
  assert inf("(iif true 2 false)") == "Type error"
  assert inf("((fn e (. e message)) 1)") == "Type error"
  assert inf("(struct a () b int) (vec (a 1) (new c 2))") == "Type error"
  assert inf("(do (if false return 1) (return true))") == "Type error"
}
