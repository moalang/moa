enum bool {
  true
  false
}

interface num a {
  (+ - * ** / % | & ^) a a a
  (abs neg) a
  float float
}

extern (int i8 i16 i32 i64 u8 u16 u32 u64) {
  .num
  char str
  f32  f32
  f64  f64
}

extern (float f32 f64) {
  .num
  floor  int
  ceil   int
  round  int
}

extern str {
  ++      str str str
  size    int
  reverse str
  slice   int int? str
  split   str int? vec[str]
  index   str opt[int]
  rep     str str str
  trim    str
  starts  str bool
  ends    str bool
  has     str bool
  at      int str @error
  encode  str str? bin @error
}

extern regexp {
  test    str bool
  match   str vec[str]
  split   str int? vec[str]
  rep     str int? (vec[str] str) str
}

enum opt a {
  some a
  none
  and[b] opt[a] (a b) opt[b]
  or     opt[a] a a
  bool   bool
}

extern vec a {
  call       ...[a] vec[a]
  ++         vec[a] vec[a]
  size       int
  at         int a @error
  tie        int a a @error
  push       a a
  map[b]     (a b) vec[b]
  mapi[b]    (a int b) vec[b]
  fmap[b]    (a vec[b]) vec[b]
  dict[b c]  (a tuple(b c)) dict[b c]
  concat     vec[a] vec[a]
  keep       (a bool) vec[a]
  all        (a bool) bool
  any        (a bool) bool
  slice      int int? vec[a]
  sort       (a a bool)? vec[a]
  reverse    vec[a]
  zip[b]     vec[b] vec[tuple[a b]]
  fold[b]    b (a b b) b
  find       (a bool) opt[a]
  index      (a bool) opt[int]
  join       str str
  has        a bool
  min        a
  max        a
}

extern dict k v {
  call    ...[k v] dict[k v]
  size   int
  at     k v @error
  set    k v bool
  has    k bool
  keys   vec[k]
  values vec[v]
  vec    vec[tuple[k v]]
  merge  dict[k v] dict[k v]
}

extern set a {
  size   int
  -      set[a] set[a]
  |      set[a] set[a]
  &      set[a] set[a]
  ^      set[a] set[a]
  has    a bool
  add    a bool
  rid    a bool
  vec    vec[a]
}

extern tuple ... {
  ...(.index .type)
}

extern struct ...[id type] {
  ...(.id .type)
}

extern time {
  (year month day hour min sec wday yday offset) int
  format str str
  utc    time
  str str
  tick   int time
}


dec throw[a b] a b
dec catch[a]   (error a) a
dec if[a]      [bool a] a
dec case[a b]  a ...[a b] b

# TBD
#extern bcrypt {
#  hash str
#  eq   str str bool
#}
#
#interface mathx a {
#  (acos acosh asin asinh atan atan2 atanh cbrt cos cosh erf erfc exp gamma log log10 log2 sin sinh sqrt tan tanh) a a
#  (e pi inf nan)  a
#  (hypot logn)    a a a
#  (lgamma frexp)  a tuple[a int]
#  ldexp           a int a
#}
#alias math math[float]
#alias math32 math[f32]
#alias math64 math[f64]
#extern io {
#  argv     vec[str]
#  env      str str
#  now      time
#  sh       str ...[str] str @error
#  puts     ... void
#  print    ... void
#  stdin    reader
#  stdout   writer
#  stderr   writer
#  db[t u]  [t u] u
#  rand {
#    int        int? int? int
#    float      float? float? float
#    bin        int bin
#  }
#  fs {
#    open t     str str? (readwriter t) a @error
#    read       str bin @error
#    reads      str str @error
#    write      str ... int @error
#    append     str ... int @error
#    rm         str bool @error
#  }
#  http {
#    call   request response
#    vecen (request response)
#    request {
#      version  str
#      method   str
#      path     str
#      headers  vec[tuple[str str]]
#      body     reader
#      header   str str
#      get      str str
#      gets     str vec[str]
#      post     str str
#      posts    str vec[str]
#    }
#    response {
#      version  str
#      status   int
#      headers  vec[tuple[str str]]
#      body     writer
#      header   str str
#    }
#  }
#}
#
#extern stream {
#  offset          int
#  seek            int stream @error
#  read            int? bin @error
#  write           ... int @error
#  flush           ... int @error
#  close           bool @error
#  closed          bool
#  peek            bin
#  le              stream
#  be              stream
#  unicode         str @error
#  decode          str str @error
#  deserialize[t]  t   @error
#  i8              i8  @error
#  i16             i16 @error
#  i32             i32 @error
#  i64             i64 @error
#  u8              u8  @error
#  u16             u16 @error
#  u32             u32 @error
#  u64             u64 @error
#  f32             f32 @error
#  f64             f64 @error
#}
#extern bin {
#  size  int
#  slice int int? bin
#  tr    str str
#  utf   str
#}
