dec (==)[a] a a bool
dec (!=)[a] a a bool
dec (< )[a] a a bool
dec (<=)[a] a a bool
dec (> )[a] a a bool
dec (>=)[a] a a bool

interface num[a] {
  +   a a a
  -   a a a
  *   a a a
  **  a a a
  /   a a a
  %   a a a
  abs a
  neg a
}

interface integer[a] {
  .num[a]
  char string
}

interface floating[a] {
  .num[a]
  floor int
  ceil int
  round int
}

interface seq[a] {
  next opt[a]
}

enum bool {
  true
  false
}

type int   { .integer }
type i8    { .integer }
type i16   { .integer }
type i32   { .integer }
type i64   { .integer }
type u8    { .integer }
type u16   { .integer }
type u32   { .integer }
type u64   { .integer }
type float { .num }
type f32   { .num }
type f64   { .num }

type string {
  ++      string string string
  size    int
  reverse string
  slice   int int? string
  split   string int? vec[string]
  index   string opt[int]
  replace string string string
  trim    string
  starts  string bool
  ends    string bool
  has     string bool
}

type regexp {
  test    string bool
  capture string vec[string]
  split   string int? vec[string]
  replace string int? (vec[string] string) string
}

enum opt[a] {
  some a
  none
  dec and[b] opt[a] (a b) opt[b]
  dec or     opt[a] a a
  dec bool   bool
}

dec vec[a] ...[a] vec[a]
type vec[a] {
  ++      vec[a] vec[a]
  size    int
  at      int a @error
  tie     int a a @error
  push    a a
  map[b]  (a b) vec[b]
  mapi[b] (a int b) vec[b]
  fmap[b] (a vec[b]) vec[b]
  keep    (a bool) vec[a]
  all     (a bool) bool
  any     (a bool) bool
  slice   int int? vec[a]
  sort    (a a bool)? vec[a]
  reverse vec[a]
  zip[b]  vec[b] vec[tuple[a b]]
  fold[b] b (a b b) b
  find    (a bool) opt[a]
  index   (a bool) opt[int]
  join    string string
  has     a bool
  min     a
  max     a
}

dec map[k v] ...[k v] map[k v]
type map[k v] {
  size   int
  at     k a @error
  get    k opt[a]
  set    k v bool
  has    k bool
  keys   vec[k]
  values vec[v]
  vec    vec[tuple[k v]]
}

dec set[a] ...[a] set[a]
type set[a] {
  size   int
  -      set[a] set[a]
  |      set[a] set[a]
  &      set[a] set[a]
  ^      set[a] set[a]
  has    a bool
  add    a bool
  rid    a bool
  vec    vec[a]
}

dec fn[... ret] ... ret
type fn[... ret]

dec tuple[...] ... tuple[...]
type tuple[...] {
  ...(.index .type)
}

dec struct[...[id type]] ... struct[...]
type struct[...[id type]] {
  ...(.id .type)
}

dec time string time
type time {
  year   int
  month  int
  day    int
  hour   int
  min    int
  sec    int
  offset int
  yday   int
  mday   int
  wday   int
  utc    time
  tick   int time
  iso    string
  format string string
}

class error {
  message string
  stack   string
  thrown  any
}

dec throw[a b] a b
dec catch[a]   error a) a
dec if[a]      ...[bool a] a
dec case[a b]  a ...[a b] b
dec default[a] a

extern io {
  argv vec[string]
  env  map[string string]
  now  time
  put  ... void
  puts ... void
  log  ... void
}

let rune u64
let byte u8
let bin  vec[byte] + {
  dec tr string string
  dec unicode string @error
}

# TBD
#extern bcrypt {
#  hash string
#  eq   string string bool
#}
#
#extern mathf[a] {
#  (acos acosh asin asinh atan atan2 atanh cbrt cos cosh erf erfc exp gamma log log10 log2 sin sinh sqrt tan tanh) a a
#  (e pi inf nan)  a
#  (hypot logn)    a a a
#  (lgamma frexp)  a tuple[a int]
#  ldexp           a int a
#}
#
#let math math[float]
#let math32 math[f32]
#let math64 math[f64]
#
#extern io {
#  sh   string ...[string] string @error
#  db[t u]  [t u] u
#  rand {
#    int        int? int? int
#    float      float? float? float
#    bin        int bin
#  }
#  fs {
#    read       string bin @error
#    write      string ... int @error
#    append     string ... int @error
#    remove     string bool @error
#  }
#  http {
#    fetch string requestinit? response
#    serve (request responseinit)
#    requestinit {
#      method?  string
#      headers? map[string string]
#      body?    bin
#    }
#    responseinit {
#      status   int
#      headers? map[string string]
#      body?    bin
#    }
#    request {
#      method  string
#      path    string
#      header  string string
#      cookie  string string
#      body    bin
#      get     string string
#      post    string string
#    }
#    response {
#      version  string
#      status   int
#      headers  vec[tuple[string string]]
#      body     bin
#      header   string string
#    }
#  }
#}
#
#interface stream {
#  offset          int
#  seek            int stream @error
#  read            int? bin @error
#  write           ... int @error
#  flush           ... int @error
#  close           bool @error
#  closed          bool
#  peek            bin
#  le              stream
#  be              stream
#  unicode         string @error
#  decode          string string @error
#  deserialize[t]  t   @error
#  i8              i8  @error
#  i16             i16 @error
#  i32             i32 @error
#  i64             i64 @error
#  u8              u8  @error
#  u16             u16 @error
#  u32             u32 @error
#  u64             u64 @error
#  f32             f32 @error
#  f64             f64 @error
#}
