enum bool {
  true
  false
}

interface num a {
  (+ - * ** / % | & ^) a a a
  (abs neg) a
}

extern (int i8 i16 i32 i64 u8 u16 u32 u64).num {
  char string
}

extern (float f32 f64).num {
  floor  int
  ceil   int
  round  int
}

extern string {
  ++      string string string
  size    int
  reverse string
  slice   int int? string
  split   string int? vec[string]
  index   string option[int]
  replace string string string
  trim    string
  starts  string bool
  ends    string bool
  has     string bool
  encode  string string? bin @error
}

extern regexp {
  test    string bool
  capture string vec[string]
  split   string int? vec[string]
  replace string int? (vec[string] string) string
}

enum option a {
  some a
  none
  and[b] option[a] (a b) option[b]
  or     option[a] a a
  bool   bool
}

extern vec a {
  call    ...[a] vec[a]
  ++      vec[a] vec[a]
  size    int
  at      int a @error
  tie     int a a @error
  push    a a
  map[b]  (a b) vec[b]
  mapi[b] (a int b) vec[b]
  fmap[b] (a vec[b]) vec[b]
  keep    (a bool) vec[a]
  all     (a bool) bool
  any     (a bool) bool
  slice   int int? vec[a]
  sort    (a a bool)? vec[a]
  reverse vec[a]
  zip[b]  vec[b] vec[tuple[a b]]
  fold[b] b (a b b) b
  find    (a bool) option[a]
  index   (a bool) option[int]
  join    string string
  has     a bool
  min     a
  max     a
}

extern map k v {
  call    ...[k v] map[k v]
  size   int
  at     k v @error
  set    k v bool
  has    k bool
  keys   vec[k]
  values vec[v]
  vec    vec[tuple[k v]]
}

extern set a {
  size   int
  -      set[a] set[a]
  |      set[a] set[a]
  &      set[a] set[a]
  ^      set[a] set[a]
  has    a bool
  add    a bool
  rid    a bool
  vec    vec[a]
}

extern tuple ... {
  ...(.index .type)
}

extern struct ...[id type] {
  ...(.id .type)
}

extern time {
  (year month day hour min sec wday yday offset) int
  format string string
  utc    time
  string string
  tick   int time
}

extern io {
  argv     vec[string]
  env      string string
  now      time
  sh       string ...[string] string @error
  puts     ... void
  print    ... void
  stdin    stream
  stdout   stream
  stderr   stream
  db[t u]  [t u] u
  rand {
    int        int? int? int
    float      float? float? float
    bin        int bin
  }
  fs {
    open t     string string? (stream t) a @error
    read       string bin @error
    reads      string string @error
    write      string ... int @error
    append     string ... int @error
    rm         string bool @error
  }
  http {
    call   request response
    vecen (request response)
    request {
      version  string
      method   string
      path     string
      headers  vec[tuple[string string]]
      body     stream
      header   string string
      get      string string
      gets     string vec[string]
      post     string string
      posts    string vec[string]
    }
    response {
      version  string
      status   int
      headers  vec[tuple[string string]]
      body     stream
      header   string string
    }
  }
}

extern stream {
  offset          int
  seek            int stream @error
  read            int? bin @error
  write           ... int @error
  flush           ... int @error
  close           bool @error
  closed          bool
  peek            bin
  le              stream
  be              stream
  unicode         string @error
  decode          string string @error
  deserialize[t]  t @error
  i8              i8  @error
  i16             i16 @error
  i32             i32 @error
  i64             i64 @error
  u8              u8  @error
  u16             u16 @error
  u32             u32 @error
  u64             u64 @error
  f32             f32 @error
  f64             f64 @error
}

extern bin {
  size    int
  slice   int int? bin
  tr      string string
  unicode string
  stream  stream
}

extern bcrypt {
  hash string
  eq   string string bool
}

extern mathf[a] {
  (acos acosh asin asinh atan atan2 atanh cbrt cos cosh erf erfc exp gamma log log10 log2 sin sinh sqrt tan tanh) a a
  (e pi inf nan)  a
  (hypot logn)    a a a
  (lgamma frexp)  a tuple[a int]
  ldexp           a int a
}
alias math math[float]
alias math32 math[f32]
alias math64 math[f64]

dec throw[a b] a b
dec catch[a]   (error a) a
dec if[a]      ...[bool a] a
dec case[a b]  a ...[a b] b
dec default[a] a
