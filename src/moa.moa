class type:
  tname str
  targs vec[type]

class token:
  code   str
  offset int
  lineno int
  indent int

class ast:
  head token
  tail vec[ast]
  type type

let stmt = token("stmt" 0 0 0)

dec compile: str str
def compile moa:
  return `package main\n\nimport "fmt"\nfunc main() { fmt.Println("moa-go") }`
  let nodes = parse(moa)
  infer nodes
  return gen(nodes)

dec tokenize: str vec[token]
def tokenize moa:
  return [Token("" 0 0 0)]

dec parse: vec[token] ast
def parse moa:
  let nodes = tokenize(moa)
  return nodes

dec infer: ast void
def infer nodes:
  return

dec gen: ast str
def gen nodes:
  return "fmt.Println(1)"
