class Token {
  code string
  lineno int
}
def tokenize program {
  var pos = 0
  var lineno = 0
  var tokens = []
  let rule = ```([A-Za-z_][A-Za-z0-9_]*|-?0x[A-Fa-f0-9]+|-?[0-9]+(?:(?:\.[0-9]+)|(?:e[0-9]+))?|""".*?"""|"[^"]*?"|`{2}.*?`{2}|`[^`]*?`|[ \r\n\t]+|[()\[\]{};]|#[^\n]*)```
  each code rule.split(program).filter(fn(s s.present)) {
    if (`^[ \r\n\t#;]`.test(code) || code == "") {
      lineno += `\n|;`.split(code).size - 1
    } {
      let op = `^[+\-*/%|&<>=!]+$`.test(code)
      let op2 = op && " \n\t".has(program[pos + code.length])
      let op1 = op && op2
      let dot = code == "."
      let call = code == "(" && (pos > 0 && !("\n\t ".has(program[pos-1])))
      tokens.push Token(code lineno)
    }
    pos += code.size
  }
  tokens
}
def parse tokens {
  let pos = 0
  def until f g h? {
    let a = []
    while pos < tokens.size && f(tokens[pos]) {
      a.push g()
    }
#    h?()
    a
  }
#  def untilBy code until(fn(t t.code != code) parseAtom fn(pos+=1))
#  def drop node code {
#    if pos < tokens.size && tokens[pos].code == code {
#      pos += 1
#      return node
#    } {
#      throw `No '${code}' after ${showNode(node)}`
#    }
#  }
#  def isClose s ")]}".has(s[0])
#  def parseAtom {
#    def link node iif(
#      pos < tokens.length && tokens[pos].dot link([tokens[pos++], node, tokens[pos++]])
#      pos < tokens.length && tokens[pos].op2 link([tokens[pos++], node, parseAtom()])
#      pos < tokens.length && tokens[pos].call (pos++, link([node, ...untilBy(")")]))
#      pos < tokens.length && tokens[pos].index link([tokens[pos++], node, ...untilBy("]")])
#      node)
#    let t = tokens[pos]
#    pos += 1
#    iif(t.code == "(" link([t, ...untilBy(")")])
#        t.code == "[" link([t, ...untilBy("]")])
#        t.code == "{" link([t, ...drop(parseTop(), "}")])
#        t.op1          link([t, parseAtom()])
#        link(t))
#  }
#  def parseLine {
#    let lineno = tokens[pos].lineno
#    let a = until(fn(t t.lineno == lineno && !isClose(t.code)) parseAtom)
#    iif a.length == 1 a[0] a
#  }
#  def parseTop until(fn(t !isClose(t.code)) parseLine)
#  parseTop()
  ""
}
def compile program {
  let tokens = tokenize(program)
  let nodes = parse(tokens)
  "1"
}
