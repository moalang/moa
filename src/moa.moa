class token:
  code   str
  offset int
  lineno int
  indent int
  op1    bool
  op2    bool

enum ast:
  leaf token
  node vec[ast]

dec compile: str str
def compile moa:
  let nodes = parse(moa)
  infer nodes
  return nodes.map(gen).join("\n")

dec tokenize: str vec[token]
def tokenize moa:
  var pos = 0
  var lineno = 1
  var indent = 0
  var tokens = []
  def isop c   : return "+-*/%|&^<>!=~".has(c)
  def isspace c: return c == " " || c == "\n"
  def isnum c  : return "0" <= c && c <= "9"
  def isid c   : return (("A" <= c) && (c <= "Z")) || (("a" <= c) && (c <= "z")) || c == "_"
  def isidnum c: return isid(c) || isnum(c)
  def skip f: while pos < moa.size && f(moa[pos]): pos += 1
  while pos < moa.size:
    let offset = pos
    let c = moa[pos]
    pos += 1
    if:
      isspace(c): skip isspace
      isnum(c)  : skip isnum
      isid(c)   : skip isidnum
      isop(c)   : skip isop
      c == '"'  :
        skip c => c != '"'
        pos += 1
      throw "Unknown character " + c
    let s = moa.slice(offset pos)
    if isspace(c):
      lineno += s.split("\n").size - 1
      indent = iif(s.has("\n") s.split("\n").at(-1).size indent)
    else:
      let op1 = isop(c) && pos < moa.size && moa[pos] != " "
      let op2 = isop(c) && !op1
      let prefix = iif((offset === 0 || moa[offset - 1] == " ") && "([{".has(c) " " "")
      tokens.push token(prefix + s offset lineno indent op1 op2)
  return tokens

dec parse: vec[token] ast
def parse moa:
  let tokens = tokenize(moa)
  var pos = 0
  def untilBy code:
    var a = []
    while pos < tokens.size && tokens[pos].code != code:
      a.push consume()
    pos += 1
    return a
  def link a:
    if pos >= tokens.size:
      return a
    let t = tokens[pos]
    if t.code == "(":
      pos += 1
      return link(node([a].concat(untilBy(")"))))
    else if t.op2:
      pos += 1
      return link(node([leaf(t) a consume()]))
    else:
      return a
  def consume:
    let t = tokens[pos]
    pos += 1
    return iif t.op1:
      link node([leaf(t) consume()])
      link leaf(t)

  return [consume()]

dec infer: ast void
def infer nodes:
  return

def gen root:
  def gennode head tail:
    return match head:
      node n: gen(n) + "(" + tail.map(gen).join(", ") + ")"
      leaf t: iif:
        t.op1: t.code + "(" + (gen(tail[0])) + ")"
        t.op2: gen(tail[0]) + " " + t.code + " " + gen(tail[1])
  return match root:
    leaf t: t.code
    node n: gennode n[0] n.slice(1)
