class Token {
  code string
  lineno int
  op1    bool
  op2    bool
  dot    bool
  call   bool
  index  bool
}

enum Tree {
  Leaf Token
  Node vec[Tree]
}

def show node match(node
  Leaf fn(t t.code)
  Node fn(a (++ "(" a.map(show).join(" ") ")")))

def tokenize program {
  var pos = 0
  var lineno = 0
  var tokens = []
  let rule = ```([A-Za-z_][A-Za-z0-9_]*|-?0x[A-Fa-f0-9]+|-?[0-9]+(?:(?:\.[0-9]+)|(?:e[0-9]+))?|""".*?"""|"[^"]*?"|`{2}.*?`{2}|`[^`]*?`|[ \r\n\t]+|[()\[\]{};]|#[^\n]*)```
  each code rule.split(program).filter(fn(s s.present)) {
    if (`^[ \r\n\t#;]`.test(code) || code == "") {
      lineno += `\n|;`.split(code).size - 1
    } {
      let op = `^[+\-*/%|&<>=!]+$`.test(code)
      let lc = pos > 0 ? program[pos - 1] : ''
      let rc = program[pos + code.length]
      let op2 = op && lc === " " && rc === " "
      let op1 = (op || code === "...") && !op2
      let dot = code === "."
      let call = code === "(" && `[A-Za-z0-9_)\]?]`.test(lc)
      let index = code === "[" && `[A-Za-z0-9_)\]?]`.test(lc)
      tokens.push Token(code lineno op1 op2 dot call index)
    }
    pos += code.size
  }
  tokens
}

def parse tokens {
  var pos = 0
  def until f g h? {
    let a = []
    while pos < tokens.size && f(tokens[pos]) {
      a.push g()
    }
    h?()
    a
  }
  def untilBy code until(fn(t t.code != code) parseAtom fn(pos += 1))
  def drop node code {
    if pos < tokens.size && tokens[pos].code == code {
      pos += 1
      return node
    } {
      throw `No '${code}' after ${showNode(node)}`
    }
  }
  def isClose s ")]}".has(s[0])
  def parseAtom {
    def next {
      let t = tokens[pos]
      pos += 1
      Leaf t
    }
    def call node {
      pos += 1
      link Node([node ...untilBy(")")])
    }
    def link node iif(
      pos < tokens.length && tokens[pos].dot link(Node([next() node next()]))
      pos < tokens.length && tokens[pos].op2 link(Node([next() node parseAtom()]))
      pos < tokens.length && tokens[pos].call call(node)
      pos < tokens.length && tokens[pos].index link(Node([next() node ...untilBy("]")]))
      node)
    let t = tokens[pos]
    let l = Leaf(t)
    pos += 1
    iif(t.code == "(" link(Node([l ...untilBy(")")]))
        t.code == "[" link(Node([l ...untilBy("]")]))
        t.code == "{" link(Node([l ...drop(parseTop() "}")]))
        t.op1         link(Node([l parseAtom()]))
        link(l))
  }
  def parseLine {
    let lineno = tokens[pos].lineno
    let a = until(fn(t t.lineno == lineno && !isClose(t.code)) parseAtom)
    iif a.length == 1 a[0] Node(a)
  }
  def parseTop until(fn(t !isClose(t.code)) parseLine)
  parseTop()
}

def generate node {
  def genleafnode t tail {
    iif(t.code === "fn" (++ "func() { return " generate(tail[-1]) + "}")
      (++ generate(Leaf(t)) "(" tail.map(generate).join(", ") ")"))
  }
  def gennode head tail {
    match(head
      Leaf fn(t genleafnode(t tail))
      Node (++ generate(head) "(" tail.map(generate).join(", ") ")"))
  }
  match(node
    Leaf fn(t t.code)
    Node fn(a gennode(a[0] a.slice(1))))
}

def compile program {
  let tokens = tokenize(program)
  let nodes = parse(tokens)
  nodes.map(generate).join("\n")
}
