def main {
  match(io.argv[0]
    "build"   build()
    "repl"    execute("repl")
    "run"     execute("run")
    "test"    execute("test")
    "upgrade" upgrade()
    "version" io.puts("moa0.0.1")
    _         io.puts(`Moa is a programming language

Usage: moa <command> [...arguments]

Commands:
  moa build [...files]    Compile to an executable file
  moa repl  [...files]    Start a shell
  moa run   [...files]    Run a file
  moa test  [...files]    Run tests
  moa upgrade             Upgrade to latest version of Moa
  moa version             Display Moa version`))
}

def upgrade {
  let bin "~/.moa/bin/moa"
  let tmp "/tmp/moa"
  let url "https://github.com/moalang/moa/archive/refs/tags/latest-" ++ io.os ++ "-" ++ io.arch
  io.mkdir "~/.moa/bin/"
  io.write tmp io.http.get(url)
  io.mv tmp bin
  io.puts bin "was upgraded"
}

def build {
  io.write "a" ("#!node\n" ++ generate())
  io.shell "chmod 0755 a"
}

def execute mode {
  io.write "/tmp/moa_tmp.js" generate()
  io.shell "MOA_ENV=" ++ mode ++ " node /tmp/moa_tmp.js"
}

def generate {
  return genjs(infer(io.glob("**/*.moa").fmap(fn(path parse(tokenize(io.reads(path) path))))))
}

def tokenize program pathc {
  return []
}

def parse tokens {
  return []
}

def infer nodes {
  return nodes
}

def genjs nodes {
  return `console.log(process.argv)`
}
