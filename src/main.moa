def main {
  match(io.argv[0]
    "build"   build()
    "c"       io.puts(genc(load()))
    "js"      io.puts(genjs(load()))
    "env"     env(io.argv[1])
    "ide"     ide(io.argv[1] || "9080")
    "repl"    repl()
    "run"     run("-DDEBUG")
    "test"    run("-DTEST")
    "version" io.puts("moa0.0.1")
    _         io.puts("Moa is a programming language

Usage: moa <command> [...arguments]

Commands:
  moa build [...files]     compile to an executable file
  moa c     [...files]     compile to C
  moa js    [...files]     compile to JavaScript
  moa repl  [...files]     start a shell
  moa run   [...files]     compile and run
  moa test  [...files]     run tests
  moa env   [version]      switch to a selected version
  moa ide   [port=9080]    launch IDE in the browser
  moa version              display Moa version"))
}

def load {
  return infer(io.glob("**/*.moa").fmap(fn(path parse(tokenize(io.reads(path) path)))))
}

def build ...args {
  let c genc(load())
  io.write "/tmp/a.c" c
  io.shell "cc" "/tmp/a.c" "-O3" "-o" "a" ...args
}

def run ...args {
  build ...args
  io.shell "./a"
}

def env version {
  if version {
    let mpath "~/.moa/bin/moa"
    let vpath "~/.moa/bin/" + version
    if !io.exists(vpath) {
      let url "https://github.com/moalang/moa/archive/refs/tags/" + version + "-" + io.os + "-" + io.arch
      io.write(vpath io.http.get(url))
    }
    io.rm mpath
    io.ln vpath mpath
    return
  }
  io.puts(io.glob("~/.moa/bin/*"))
}

def ide port {
  io.http.listen port io.embed("./ide").add("moa.js" genjs(load()))
}

def repl {
  let context load()
  io.readline "> " fn(r {
    if ":q :quit :e :exit".split(" ").has(r.line) {
      r.exit "Bye"
    }
    r.puts(eval(r.line context))
  })
}
