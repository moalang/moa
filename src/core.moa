dec void

interface any a:
  (== !=) a bool
  (> >= < <=) a bool
  __hash int

dec ref a:
  __new   a
  value   a

enum bool:
  true
  false

dec throw a b: a any
dec catch a  : a (error a) a
dec if a     : ...[bool a] a

enum option a:
  some a
  none

dec option a:
  and[b] (a b) option[b]
  or     a a
  bool   bool

interface num a:
  (+ - * ** / % | & ^) a a a
  (abs neg) a

dec (int i8 i16 i32 i64 u8 u16 u32 u64):
  .num
  char string

dec (float f32 f64):
  .num
  floor  int
  ceil   int
  round  int

dec string:
  __new   any
  ++      string string string
  size    int
  reverse string
  slice   int int? string
  split   string int? list[string]
  index   string option[int]
  replace string string string
  trim    string
  starts  string bool
  ends    string bool
  has     string bool

dec list a:
  __new   ...[a]
  ++      list[a] list[a]
  size    int
  at      int a @error
  tie     int a a @error
  push    a a
  map[b]  (a int? b) list[b]
  fmap[b] (a int? list[b]) list[b]
  keep    (a bool) list[a]
  all     (a bool) bool
  any     (a bool) bool
  slice   int int? list[a]
  sort    (a a bool)? list[a]
  reverse list[a]
  zip[b]  list[b] list[tuple[a b]]
  fold[b] b (a b b) b
  find    (a bool) option[a]
  index   (a bool) option[int]
  join    string string
  has     a bool
  min     a
  max     a

dec dict k v:
  __new  ...[k v]
  size   int
  at     k v @error
  set    k v bool
  has    k bool
  keys   list[k]
  values list[v]
  list   list[tuple[k v]]

dec set a:
  __new  ...a
  size   int
  -      set[a] set[a]
  |      set[a] set[a]
  &      set[a] set[a]
  ^      set[a] set[a]
  has    a bool
  add    a bool
  rid    a bool
  list   list[a]

dec tuple ...a[any]:
  __new  ...a
  ...a.map(x,i => tuple(i h))

dec struct ...a[id type]:
  __new  ...[a.map((id type) => type)]
  ...a.map((id type) => tuple(id type))

dec time:
  (year month day hour min sec wday yday offset) int
  string string? string
  zone   string
  offset int
  lcoal  string time

dec bytes:
  __new   int? int?
  at      int u8 @error
  append  ...any bytes
  size    int
  slice   int int? bytes
  tr      string string
  stream  stream

interface stream a:
  read     int? int? bytes @error
  reads[t] t @error
  peek     bytes
  write    ...any int @error
  flush    int @error
  offset   int
  seek     int @error
  close    bool @error
  closed   bool
  endian   string # LE or BE
  le       a
  be       a
